Samantha Rack
CSE 20212, Lab 1

When the user runs the driver program made in part 3 folder, an empty connect 4 board is displayed to the user, and he or she (defined as player 1) is prompted to choose a column in which he or she would like to play the first disc.  After choosing a valid column, the board is displayed again (including the userâ€™s played disc), text is displayed stating that the computer player chose a column, and the updated board is displayed.  The user is again prompted to choose a column.  This pattern continues until the user gets four in a row, the computer gets four in a row, or the user enters -1 (the escape sequence for this program).  If the column chosen by the user is invalid (if the column is full or if the column is outside of the range of the available columns), then the program informs the user that it is an invalid column number and requests another column until a valid number is entered.  

The Connect4 game is composed of interfaces for C4Col (C4Col.h) and C4Board (C4Board.h), implementations for C4Col (C4Col.cpp) and C4Board (C4Board.cpp), and a driver program that runs the game (main.cpp).  C4Col.h defines the public member functions (including the constructor and deconstructor) and private data members of the class.  
C4Col.cpp includes the definitions for all of the member functions in C4Col.  The default constructor for C4Col initialized private data members numDiscs and maxDiscs using the assignment operator.  The pointer playersDiscs was intialized to point to a dynmaically allocated array on the heap using the new function.  It was then initialized with ' ' using a for loop.  The destructor calls the delete function to free the allocated memory when a C4Col object is destroyed.  Functions getDisc, getMaxDiscs, and getNumDics() returned each of the identified private variables.  addDisc uses isFull to determine if there is room to add a disc, and if so, adds the requested disc.
C4Board.cpp first defines a constructor for the class, dynamically allocating an array of 7 C4Col objects.  The destructor for this class works in the same way as the one implemented in C4Col.cpp.  The display function is used to print a formatted board with the discs currently in it.  This is implemented using nested for loops.  It is called by the play function to display the updated board each time a player chooses a valid column in which to place a new disc.  play, after the first column choice by player 1, enters a while loop that does not terminate until the user enters -1 or hasWon returns true.  In the while loop, the player's column choice is verified (to be within the range of column numbers and to be a column that is not full) using if statements.  When valid input has been entered, the user's disc is added, the board is displayed, and hasWon is called for player 1.  The computer then makes a random choice (in the range of the valid column numbers), which is checked with isFull.  The computer's choice is added to the board and display is called.  hasWon is then called for player 2 (the computer), and the loop continues.  The hasWon function takes arguments of the column chosen and the player (1 or 2).  It uses the player number to know which characters to look for in the board, and it uses chosenColumn to determine the position of the disc just played by the given player.  A variable called discsInSequence is used to track how many discs in a row are found.  If this is ever equal to 4, hasWon displays a congratulatory message and returns the players number (a true value).
The driver program simply instantiates a C4Board object and calls the play function.  In the program made in part3 directory, the game involves a computer player as player 2 (it compiles with C4Board2.cpp).  C4Board.cpp is the file that contains implementation for a C4Board class with 2 users playing (no computer player).

The program was validated using extensive testing, and by building the program incrementally.  After the driver program and the C4Col and C4Board implementation and interface were written for part2, the program was tested without the hasWon function.  This part of testing with the driver program validated the play (which ensured that the column chosen was correct) and display function of C4Board class, and the addDisc and isFull functions of C4Col class.  In editing the programs for part3, a hasWon function was created and tested for C4Board class.  Various boundary conditions were checked to ensure that hasWon determined a winner for horizontal, vertical, and diagonal.

Using get functions for private data members in the implementation of Connect 4 allowed for the validation of the argument of the function (ie. getDisc checks that the request disc is a number >= 0 or < maxDiscs).  This prevents the program from being redundant and having to validate the values for each request for a disc.
Deconstructors are necessary with dynamic memory management for the delete function used in the defined deconstructor.  When memory is dynamically allocated, it must be released after its use is complete, or a memory leak will be present.  The deconstructor frees the memory allocated by the constructor for each object that is instantiated. 
