PART 1:
The link to our repository (my branch) is https://bitbucket.org/srack/donkeykong.  However, the repository is private so the source code will be inaccessible to you.  I put all of this code in my dropbox for lab78 (in directory src), along with a makefile that will compile the code.

PART 2:
	The internal structure of the program is very similar to the structure set up by the tutorials on sdltutorial.com.  There is a main class called CApp, which is the only object instantiated for main.  This class is (and will be) the driver of the whole program, containing composition with many of the other classes defined by the program.  It's member function OnExecute() is the only function called in main.  It contains initialization of all neccessary data and SDL setup, a while loop that checks for events, updates the data according to animation or to events, and renders the updated data to the screen as images.  When the while loop is exited (occurs when SDL_Quit event occurs), a clean up function is called to free all memory allocated for SDL.
	Other classes include CSurface, CAnimation, CEntity, CEvent, and CMario.  The CSurface class is not meant to be instantiated as an object, but instead contains static public member functions.  These functions include OnLoad(), which is used in loading images from files and optimizing these; OnDraw(), an overloaded function that blits images to specified locations on the screen; and Transparent(), which sets a color key for images.  CAnimation class handles objects that iterate through a number of frames to display animation.  This class is used in composition within CEntity, which is a class for objects that will be interactive in the game (ie. Mario, barrels, fireballs, etc).  CEntity declares a static vector of pointers to CEntity objects, so that all of the Entities in the game will be kept track of in one place.  CEntity has its own invocations of intialization, looping, rendering, and clean up functions, which are called within the corresponding ones of CApp.  These functions load image files of the entities, call CAnimation:OnAnimate() to update, call CSurface:OnDraw() to render to the screen, and SDL functions to free memory.  CMario class is an inheriting class of CEntity that contains additional private data members for mario's number of livesand his state (at this point, only if he has a hammer or not).  This and other classes currently in defined by the source files will be expanded.

	The verification of the source code was done incrementally.  As each class was developed which going through tutorials, the code was compiled and run.  Since the tutorials well define what is added at each step, the basic functionality of the classes with SDL could be carefully checked.  The background images that will be used for the map were created meticulously to ensure that pixel by pixel collision with the map will be accurate to the image blitted to the screen.  The current src files compile together and display what is expected to the screen. 

PART 3:
	Adjusting the material from sdltutorials.com to have basic source files for the program gives a foundation for the group to work off of from this point forward.  This foundation will provide a good environment for the game to be built in as further parts of the program are implemented and tested.  Additionally, the .png image files for the static background objects of DonkeyKong that I formed this week were developed to make accurate mapping possible as we move forward.  Each of the platforms on the images is placed proportionally to the entire screen and at specific heights and widths (in terms of the pixels).

