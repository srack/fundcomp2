Samantha Rack
CSE 20212
Lab 4 Report

When the user runs the driver program (./main) for the BlackJack class, the first card drawn from the top of the deck is outputed as text with its point value in parentheses next to it.  The user is then told the total number of points, and asked if he or she would like to hit or not.  If the player hits, the next card is drawn off the top of the deck, displayed, and added to the total.  This continues as many times as the player chooses hit, or until the total points exceeds 21 (called a bust).  In the case where the user chooses to stand, it is the dealer's turn.  The dealer's cards are displayed for as many times as the dealer hits, then the totals of both the player and the dealer are shown.  The user wins when he or she has a score greater than the dealer, but less than 21, or if the dealer busts.  The dealer wins with a tie or a higher score than the user, or if the user busts.  If the player exceeds 21, the dealer does not draw cards, but instead automatically wins.  The program then displays the wins count for both the player and the dealer, and asks the user if he or she would like to play again.

Internally, the BlackJack program is implemented using 5 files- main.cpp, CardDeck.h, CardDeck.cpp, BlackJack.cpp, and BlackJack.h.  main.cpp serves as the driver program for the BlackJack class object that calls member function play() to start the game and continue until the user chooses the quit option.  CardDeck.h and CardDeck.cpp are the interface and implementation (respectively) of the CardDeck class, which is used through composition as a private data member of the class BlackJack.  The CardDeck class is implemented in CardDeck.cpp.  The only private data member is an STL defined deque, which stores the cards in a given deck.  The constructor seeds the random number to be used for the shuffle() function, and initializes the deque using push_back().  shuffle() uses the STL algorithm random_shuffle() along with the deque functions begin() and end() to randomly order the elements of the deck.  Other member functions return values or perform operations that require access to the private data member deck.  These functions allow the BlackJack class to perform the needed operations in its implementation.  For example, in BlackJack.cpp, the member function deal() requires the first card in the deck object to be removed, and also requires its information (ie. the card number).  The function removeTopCard() of the CardDeck class stores the value of the first element of the deck in a temporary integer variable, uses the deque function pop_front() to remove this element, and returns the value of that card.  These member functions are implemented to perform data hiding.  The final function defined in CardDeck.cpp is the overloading of << operator, which is overloaded to output the elements of the deck in order, separated by commas.  This operator was helpful in debugging the BlackJack game (described in the validation explanation below).
BlackJack.h outlines the BlackJack class, with private data members CardDeck object cards and integers to keep track of the player's and dealer's wins.  BlackJack.cpp contains the implemenation of all member functions defined in BlackJack.h.  The constructor for the BlackJack class is only a default constructor, because each of its data members is always initialized to the same value.  playerWins and dealerWins always begins at 0, and the CardDeck object is initialized with the member function newDeck().  newDeck() empties the deck within the CardDeck object using its member fuction emptyDeck(), if the deck is not already empty.  newDeck() then implements a for loop to add 52 cards, in increasing order, to the CardDeck.  Finally, the object is shuffled in preparation for the game.  In addition to being used in the constructor, newDeck() is also called within the deal() function whenever the size of the CardDeck object is less than 15 to replace the depreciated deck with a full deck.  After checking the size of the deck and calling newDeck() if necessary, the deal() function calls CardDeck's removeTopCard() function, which, as described above, returns the value of the first (top) card, and removes this card from the deque.  It then prints which card was drawn using the printWhichCard(), converts this card to the respective point value, and returns the point value.  The deal() function calls covertToPointValue() to determine the point value based on modulus and addition for correcting the values with which the array was initialized.  deal() also calls printWhichCard(), which uses a switch statement to print out the appropriate name of the card (ie. 2, Jack, Ace, etc).  deal() is used by the function play(), which executes the BlackJack game.  Using nested while loops, play()determines how long to continue the game and to continue hits based on the user's input.  An outer while loop continues until the user no longer wants to play the BlackJack game.  Inner while loops continue for the player when he or she wants to hit, and for the dealer when dealerTotal is less than 17.  Each of these loops also determines if the user or the dealer has exceeded 21, at which point the winner is determined.  If neither exceeds 21, then if and else statements at the bottom of the loop determines the winner and increments the appropriate private data member corresponding to the wins.  At the bottom of the loop, the user is asked if he or she would like to play another round, and the game continues until he or she enters no (0).  

The program was verified to be correct by debugging using the overloaded << operator of the class CardDeck.  Because a CardDeck object is a private data member of the class BlackJack, its overloaded operator could be used with composition to print out the card deck each time the depreciated deck was replaced with a new, full deck of 52 cards.  Using this output in intermediate testing steps, the mapping of the elements to the specified cards and point values was verified to be correct.  Additionally, the addition of the points, checking of the winner, and score keeping was verified using all outputed information.

Outputs for Monkey Sort:
Cards	Trial 1		Trial 2		Trial 3
  7	  3,305		 11,490		    520
  8	 41,059		 33,614		 67,068
  9	696,986		 50,388		168,599
