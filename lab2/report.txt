Samantha Rack
CSE 20212
Lab 2 Report

When a user runs the driver program associated with Rational class, he or she is prompted to enter a rational number in the form x/y.  After entering this number, he or she is prompted in a similar way to enter a second rational number.  If the user enters a number with 0 as its denominator, an error message is displayed, informing the user that this is invalid and the denominator will be set to the default of 1.  After the user completes the input, the program displays the results of the addition operator, the multiplication operator, the inverse operator, and the decrement operator.  If the first rational number entered equals 0, the inverse is not displayed, but instead a message stating that 0 does not have an inverse is displayed.

The Rational class includes a driver program to implement the member functions and interact with the user (main.cpp), an interface (Rational.h) with prototypes of friend and member functions and instantiation of private data members, and an implementation file (Rational.cpp) that defines the functions found in Rational.h.  
main.cpp first requests and receives input from the user using cin and cout.  It then uses this information to instantiate two objects of class Rational using the nondefault constructor.  After their creation, the two Rational objects are used with the overloaded operators of the class.  The objects are able to be printed, added, multiplied, inverted, and decremented.  However, with the inversion operator, main.cpp uses an if statement to ensure that the numerator does not equal 0.  If it does, it creates a Rational object named dummy in order for the side effects (error message) of ! (inverse) operator to take place.
Rational.h defines the class Rational.  It first declares the overloaded global operator << as a friend function, which allows the function to directly access private data members of Rational objects.  In public, it then includes the prototypes for the nondefault constructor with default values and for the overloaded operators + (addition), * (multiplication), ! (inverse), and -- (pre-decrement).  The private members of Rational class are data members numerator and denominator and the helper function gcd, which is called by the constructor and by the overloaded + and * operators. 
Rational.cpp contains the implementation of the functions found in Rational.h.  The constructor Rational first verifies the denominator.  If it equals zero, it displays an error message, sets the denominator equal to 1 and the numerator to the other provided value.  If the denominator is less than 0, then the signs of both the numerator and denominator are changed.  This ensures that if the rational number is negative, the numerator carries the negative sign.  Next, the helper function gcd is called to reduce the Rational number to lowest terms.  This helper function implements the Euclidean algorithm using a do while loop.  The overloaded << operator outputs Rational objects in the form x/y, unless the object = 0.  It is able to access private data members directly because it was declared a friend function in Rational.h.  The overloaded + operator uses the this pointer (pointer to the current object) to improve readability of the code.  It multiplies each of the numerators by the other's denominator, multiplies the denominators together, and calls the gcd function to put the resulting Rational object in lowest terms.  The overloaded * operator also uses the this pointer, multiplies the numerators together and the denominators together, and calls gcd for the resulting object.  The overloaded ! operator works as a unary inversion operator.  Using an if statement, it checks for the numerator to be 0 (in which case it outputs an error message and returns the Rational object that was passed to it), and it checks for the numerator to be less than 0 (in which case it switches the signs of denominator and numerator).  The returned Rational object has its numerator and denominator switched.  The overloaded -- unary operator decrements the current object by 1 by subtracting the denominator from the numerator.

The class Rational, its overloaded operators, and its member functions were verified to be accurate through ample testing of the driver program.  Boundary conditions (ie. when the denominator was set to 0, when the numerator equaled zero and the inverse was taken, etc) were checked using the driver program and inputing these parameters.  Furthermore, the results of the overloaded operators and the gcd function were compared to the same operations performed on a calculator.  The class verifies that the Rational objects are in lowest terms, and it is able to compute the sum, product, inverse, and decrement operations accurately.
