repository link:  https:/bitbucket.org/srack/donkeykong

As is demonstrated in the time log, my largest task in validating part of the project came in testing the implementation of CMario and the events involving the object.  This testing involved:  verifying that mario was in the correct state given an event, that state transitions (ie. between walking, jumping, climbing, and hurting) were implemented correctly, that key events were enabled or disabled based on which state mario is in, that animation matched the states and status (left or right), and that collision detection was accurate.  Each of these was verified incrementally - for example, when a glitch was found for mario's state transition between climbing and walking, each of the if statements determining state changes was analyzed for all cases, and this issue was fixed before an additional component was implemented.  The verification of the program was done both using cout statements and through playing the game itself.  Statements printed to the terminal were used to show mario's current state (during verification of state transitions and the disabling of key events depending on the state), the number of lives mario has (while debugging fire collision and reset of mario), and what objects mario was currently colliding with (also during state transition testing).  Debugging and verification by running the application revealed errors in logic that were not clear with simple cout statements.  Playing the game allowed for seeing the implementation of basic functionality, checking that the logic developed for the program matched what was happening when the application runs, and looking at boundary conditions of the game (ie. the top of a ladder, the edge of the screen, the transition up the diagonal platforms).

One of the data structures I used to implement my contributions to the project was a vector of StaticObj pointers, used to implement polymorphic calling of an IsCollision() function with a reference to the mario object instantiated by the CApp class.  In CApp_OnInitStatic.cpp, each of the Platform and Ladder objects that are used as the framework of the game were instantiated, assigned to the correct x,y position, and pushed into a vector for their respective types (there is a vector of Platforms and a vector of Ladders so the objects do not disappear after CApp_OnInitStatic() returns). Then, pointers to each of the objects instantiated were pushed into a vector to hold all of the static objects (unchanging pieces of the game).  A vector was chosen as the data structure for these objects for multiple reasons.  Each static object had to be rendered at each successive loop through the game's while loop, and walking through each element of a vector is a straightforward process.  Additionally, this iteration through the vector was used for the polymorphic calling of the collision function of the Ladder and Platform objects, which is also a function computed each time through the game loop.  Finally, since all static elements in the game were unchanging, no elements would need to ever be deleted, so memory in the vector would not have to be reallocated after intialization.

On a high level, the development of mario's motions, events, and reactions to
collisions created the basic functionality of the game.  When mario walks on a
platform, a collision is detected with that object, so mario stays on top of
it (instead of falling through).  When he jumps, gravity is applied to mario
to allow for natural motion.  Collisions with ladders were also detected to
allow mario to climb up them and go through the platform at the top.
Depending on mario's state, the controls available to the user were limited to
prevent events such as mario being able to jump as many times as possible in a
row and do other behaviors not prescribed by the game.  This contribution was
necessary for the advancement of the program because mario and his actions are
the focus of the game.  After this development, obstacles such as fire and
barrels (to be implemented in the next few days) are able to be included and
tested.  
